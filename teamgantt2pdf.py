# @author Alex Williams; 
# Email: alexjameswilliams@hotmail.com; 
# Github: alexjameswilliams

# This python script generates a Latex document from a csv file generated by TeamGantt.com
# This script will also convert the latex document to pdf if you have Latex installed.
# It may be necessary to run the script a few times to convert to pdf properly.

# Please amend the csvFilePath, title and author variables to suit your needs.

import os
import csv
import re
import datetime
from datetime import datetime

# Returns specified number of tab characters as a string
def tabs(level):
    output = ""
    for x in range(0, level):
        output += "\t"
    return output

# Output to latex file
def output(str):
    # Fix & symbols
    str = re.sub(r"\&", "\\\&", str)
    text_file.write(str)
    
# **************************************
# ***************INPUT******************
# **************************************
csvFilePath = 'FILE_NAME.csv' 			#Relative File Path to csv file
title = "TITLE"							# Title
subtitle = "SUBTITLE"					# Subtitle
author = "AUTHOR NAME"					# Author

# **************************************
# **************************************

# Open csv file
inputFile = open(csvFilePath, "rt")
reader = csv.DictReader(inputFile)

# Latex header

# Import packages
text_file = open("output.tex", "w")
output("\\documentclass[]{report}\n")
output("\\usepackage[a4paper, total={6in, 8in}]{geometry}\n")
output("\\usepackage{xcolor}\n")
output("\\usepackage{pdfpages}\n")
output("\\usepackage{hyperref}\n")
output("\\usepackage{fancyhdr}\n\n")

# Documemt info
output("\\title{" + title + "\\\\\n")
output("\t\\large " + subtitle + "\\\\\n")
output("}\n")
output("\\date{}\n")
output("\\author{"+ author +"}\n\n")

# Hyperlink setup
output("\\hypersetup{\n")
output("\tcolorlinks=true,\n")
output("\tlinkcolor=black,\n")
output("\tfilecolor=magenta,\n")     
output("\turlcolor=blue,\n")
output("}\n\n\\urlstyle{same}\n\n\n")

#Header and footer
output("\\pagestyle{fancy}\n")
output("\\fancyhf{}\n")
output("\\fancyhead[LE,RO]{"+ author +"; "+ title +" \\\\\n")
output(title + "}\n")
output("\\fancyfoot[LE,RO]{\\thepage}\n")

# Table of contents
output("\\begin{document}\n\n")
output("\\maketitle\n")
output("\\tableofcontents\n")
output("\\newpage\n")

# Make date appear on same line as section titles
output("\\makeatletter\n")
output("\\renewcommand\\chapter{\\@startsection{chapter}{0}{\\z@}%\n")
output("\t{-3.25ex\\@plus -1ex \\@minus -.2ex}%\n")
output("\t{-1.5ex \\@plus .2ex}%\n")
output("\t{\\normalfont\\LARGE\\bfseries}}\n")
output("\\renewcommand\\section{\\@startsection{section}{2}{\\z@}%\n")
output("\t{-3.25ex\\@plus -1ex \\@minus -.2ex}%\n")
output("\t{-1.5ex \\@plus .2ex}%\n")
output("\t{\\normalfont\\Large\\bfseries}}\n")
output("\\renewcommand\\subsection{\\@startsection{subsection}{3}{\\z@}%\n")
output("\t{-3.25ex\\@plus -1ex \\@minus -.2ex}%\n")
output("\t{-1.5ex \\@plus .2ex}%\n")
output("\t{\\normalfont\\large\\bfseries}}\n")
output("\\makeatother\n")


rownum = 0
# Split CSV file into items
for row in reader:

    # Save header
    if rownum == 0:
        header = row
    else:
        colnum = 0
        tablevel = 1

		# Different tab level for each type of task
        if row["Type"] == "project":
            tablevel = 0
            output("\\part{" + row["Name / Title"])

        elif row["Type"] == "group":
            tablevel = 1
            output(tabs(tablevel) + "\\newpage\n")
            output(tabs(tablevel) + "\\chapter{" + row["Name / Title"])

        elif row["Type"] == "subgroup":
            tablevel = 2
            output(tabs(tablevel) + "\\section{" + row["Name / Title"])

        elif row["Type"] == "task" or row["Type"] == "milestone":
            tablevel = 3
            output(tabs(tablevel) + "\\subsection{" + row["Name / Title"])
        output("}\n")
            


        # Convert date format   
        start = datetime.strptime(row["Start Date"], '%Y-%m-%d').strftime('%d/%m/%y')
        end = datetime.strptime(row["End Date"], '%Y-%m-%d').strftime('%d/%m/%y')

        # Calculate difference in days
        startDT = datetime.strptime(row["Start Date"], '%Y-%m-%d')
        endDT = datetime.strptime(row["End Date"], '%Y-%m-%d')
        duration = (endDT - startDT).days + 1

        # Output dates
        output(tabs(tablevel) + "\\hfill ")

        # If event is 1 day then just put date
        if duration <= 1:
            output("By: " + end)

        # If event is more than 1 day, then put start date + duration
        else:
            output("Start: " + start + ",     Duration: \\textit{")
            if duration < 7:
                output(str(duration) + " days")

            elif duration == 7:
                output("1 week")
            else:
                output(str(int(round(duration / 7))) + " weeks")

            output("}")
            
        output("\n\n")


        # Output description
        output(tabs(tablevel) + row['Notes'] + "\n")
        output("\n")
        #text_file.write("\n")
   
    rownum += 1

output("\\end{document}")

inputFile.close()
text_file.close()

os.system("pdflatex output.tex")
